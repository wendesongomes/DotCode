// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model User {
  id    Int     @id @default(autoincrement())
  username String @unique
  email String  @unique
  name  String
  password String
  image String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  provider String?
  verified Boolean @default(false)
  admin Boolean @default(false)
  posts Post[]
  likes Like[]
  saves Saves[]
}

model Saves {
  userId    Int
  postId    Int
  user      User    @relation(fields: [userId], references: [id])
  post      Post    @relation(fields: [postId], references: [id])
  @@unique([userId, postId])
}

model Post {
  id           Int       @id @default(autoincrement())
  likes        Like[]
  saves        Saves[]
  content      String
  published    Boolean   @default(false)
  authorId     Int
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  parentId     Int?
  parentPost   Post?    @relation(name: "ParentPost", fields: [parentId], references: [id], onDelete: Cascade)
  childPosts   Post[]    @relation(name: "ParentPost")
  author       User      @relation(fields: [authorId], references: [id])
}

model Like {
  userId    Int
  postId    Int
  user      User    @relation(fields: [userId], references: [id])
  post      Post    @relation(fields: [postId], references: [id])
  @@unique([userId, postId])
}